// Mocks generated by Mockito 5.0.15 from annotations
// in yonomi_device_widgets/test/widgets/components/modes_toolbar_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:ui' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:yonomi_device_widgets/providers/thermostat_provider.dart'
    as _i2;
import 'package:yonomi_platform_sdk/third_party/yonomi_graphql_schema/schema.docs.schema.gql.dart'
    as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [ThermostatProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockThermostatProvider extends _i1.Mock
    implements _i2.ThermostatProvider {
  MockThermostatProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double get thermostatTargetTemperature =>
      (super.noSuchMethod(Invocation.getter(#thermostatTargetTemperature),
          returnValue: 0.0) as double);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i3.Future<void> setPointAction(String? deviceId, double? temperature,
          {_i2.SetPointActionFunction? injectSetPointThermostatMethod}) =>
      (super.noSuchMethod(
          Invocation.method(#setPointAction, [
            deviceId,
            temperature
          ], {
            #injectSetPointThermostatMethod: injectSetPointThermostatMethod
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> setThermostatMode(
          String? deviceId, _i4.GThermostatMode? mode,
          {_i2.SetModeFunction? injectSetModeMethod}) =>
      (super.noSuchMethod(
          Invocation.method(#setThermostatMode, [deviceId, mode],
              {#injectSetModeMethod: injectSetModeMethod}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> getDeviceDetail(String? deviceId,
          {_i2.GetThermostatDetailsFunction?
              injectGetThermostatDetailsMethod}) =>
      (super.noSuchMethod(
          Invocation.method(#getDeviceDetail, [
            deviceId
          ], {
            #injectGetThermostatDetailsMethod: injectGetThermostatDetailsMethod
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  void addListener(_i5.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i5.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
