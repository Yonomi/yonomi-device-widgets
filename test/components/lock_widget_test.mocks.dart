// Mocks generated by Mockito 5.0.15 from annotations
// in yonomi_device_widgets/test/components/lock_widget_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:ui' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:yonomi_device_widgets/providers/lock_provider.dart' as _i3;
import 'package:yonomi_platform_sdk/src/repository/devices/devices_repository.dart'
    as _i5;
import 'package:yonomi_platform_sdk/src/repository/traits/lock_repository.dart'
    as _i6;
import 'package:yonomi_platform_sdk/yonomi-sdk.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeDevice_0 extends _i1.Fake implements _i2.Device {}

class _FakeLockTrait_1 extends _i1.Fake implements _i2.LockTrait {}

/// A class which mocks [LockProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockLockProvider extends _i1.Mock implements _i3.LockProvider {
  MockLockProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get loadingDetail =>
      (super.noSuchMethod(Invocation.getter(#loadingDetail), returnValue: false)
          as bool);
  @override
  set loadingDetail(bool? _loadingDetail) =>
      super.noSuchMethod(Invocation.setter(#loadingDetail, _loadingDetail),
          returnValueForMissingStub: null);
  @override
  bool get loadingAction =>
      (super.noSuchMethod(Invocation.getter(#loadingAction), returnValue: false)
          as bool);
  @override
  set loadingAction(bool? _loadingAction) =>
      super.noSuchMethod(Invocation.setter(#loadingAction, _loadingAction),
          returnValueForMissingStub: null);
  @override
  _i2.Device get deviceDetail =>
      (super.noSuchMethod(Invocation.getter(#deviceDetail),
          returnValue: _FakeDevice_0()) as _i2.Device);
  @override
  bool get isLocked =>
      (super.noSuchMethod(Invocation.getter(#isLocked), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i2.LockTrait getLockTrait() =>
      (super.noSuchMethod(Invocation.method(#getLockTrait, []),
          returnValue: _FakeLockTrait_1()) as _i2.LockTrait);
  @override
  _i4.Future<void> getDeviceDetail(String? deviceId,
          {_i3.GetLockDetailsFunction? getLockDetails =
              _i5.DevicesRepository.getLockDetails}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getDeviceDetail, [deviceId], {#getLockDetails: getLockDetails}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> setLockUnlockAction(String? deviceId, bool? setLock,
          {_i3.GetLockDetailsFunction? lockDetails =
              _i5.DevicesRepository.getLockDetails,
          _i3.SendLockUnlockFunction? sendLockUnlock =
              _i6.LockRepository.sendLockUnlockAction}) =>
      (super.noSuchMethod(
          Invocation.method(#setLockUnlockAction, [deviceId, setLock],
              {#lockDetails: lockDetails, #sendLockUnlock: sendLockUnlock}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void addListener(_i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
